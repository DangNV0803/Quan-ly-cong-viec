import streamlit as st
from supabase import create_client, Client
import pandas as pd
from datetime import datetime, timezone
from collections import defaultdict
import requests
from zoneinfo import ZoneInfo
import re
import unicodedata
import time

# --- Page Configuration ---
st.set_page_config(
    layout="wide",
    page_title="Trang Qu·∫£n l√Ω",
    page_icon="üë®‚Äçüíº"
)

# --- Supabase Connection ---
@st.cache_resource
def init_supabase_auth_client() -> Client:
    """Initializes a client for authentication using the anon key."""
    try:
        url = st.secrets["supabase_new"]["url"]
        key = st.secrets["supabase_new"]["anon_key"]
        return create_client(url, key)
    except Exception as e:
        st.error(f"L·ªói c·∫•u h√¨nh Supabase (Auth). Chi ti·∫øt: {e}")
        st.stop()

@st.cache_resource
def init_supabase_admin_client(project_name: str) -> Client:
    """Initializes a client for admin actions using the service key."""
    try:
        url = st.secrets[project_name]["url"]
        key = st.secrets[project_name]["service_key"]
        return create_client(url, key)
    except Exception as e:
        st.error(f"L·ªói c·∫•u h√¨nh Supabase cho '{project_name}'. Chi ti·∫øt: {e}")
        st.stop()

supabase_auth = init_supabase_auth_client()
supabase_new = init_supabase_admin_client("supabase_new")
supabase_old = init_supabase_admin_client("supabase_old")


# --- DATA FETCHING & UPDATING FUNCTIONS ---

@st.cache_data(ttl=600)
def fetch_old_projects(_client: Client):
    """Fetches projects from the old database."""
    try:
        response = _client.table('quotations').select('quotation_no, customer_name, project_type, status').execute()
        return response.data if response.data else []
    except Exception as e:
        st.error(f"L·ªói khi l·∫•y d·ªØ li·ªáu d·ª± √°n t·ª´ h·ªá th·ªëng c≈©: {e}")
        return None

@st.cache_data(ttl=300)
def fetch_all_profiles(_client: Client):
    """Fetches all user profiles from the new system."""
    try:
        response = _client.table('profiles').select('id, full_name, email, role, account_status').order('full_name').execute()
        return response.data if response.data else []
    except Exception as e:
        st.error(f"L·ªói khi l·∫•y danh s√°ch nh√¢n vi√™n: {e}")
        return None
        
@st.cache_data(ttl=60)
def fetch_all_projects_new(_client: Client):
    """Fetches all projects from the new database."""
    try:
        response = _client.table('projects').select('*').order('created_at', desc=True).execute()
        return response.data if response.data else []
    except Exception as e:
        st.error(f"L·ªói khi l·∫•y danh s√°ch d·ª± √°n m·ªõi: {e}")
        return None


@st.cache_data(ttl=60)
def fetch_all_tasks_and_details(_client: Client):
    """Fetches all tasks and joins related data like project and profile names."""
    try:
        tasks_res = _client.table('tasks').select('*, projects(project_name, old_project_ref_id)').order('created_at', desc=True).execute()
        tasks = tasks_res.data if tasks_res.data else []
        profiles = fetch_all_profiles(_client)
        if profiles is None: profiles = []
        profile_map = {p['id']: p.get('full_name', 'N/A') for p in profiles}
        for task in tasks:
            task['assignee_name'] = profile_map.get(task.get('assigned_to'))
            task['creator_name'] = profile_map.get(task.get('created_by'))
            if task.get('projects'):
                task['project_name'] = task['projects']['project_name']
        return tasks
    except Exception as e:
        st.error(f"L·ªói khi l·∫•y danh s√°ch c√¥ng vi·ªác: {e}")
        return None

@st.cache_data(ttl=30)
def fetch_comments(task_id: int):
    """Fetches comments for a specific task, joining with profile info."""
    try:
        response = supabase_new.table('comments').select('*, profiles(full_name, role), attachment_url').eq('task_id', task_id).order('created_at', desc=True).execute()
        return response.data if response.data else []
    except Exception as e:
        st.error(f"L·ªói khi t·∫£i b√¨nh lu·∫≠n: {e}")
        return []

def get_deadline_color(due_date_str: str) -> str:
    """
    Tr·∫£ v·ªÅ m√£ m√†u n·ªÅn d·ª±a tr√™n th·ªùi gian c√≤n l·∫°i ƒë·∫øn h·∫°n ch√≥t.
    - ƒê·ªè: < 3 ng√†y ho·∫∑c qu√° h·∫°n
    - Cam: 3-7 ng√†y
    - V√†ng: 7-15 ng√†y
    - Xanh: > 15 ng√†y
    """
    if not due_date_str:
        return "#f5f5f5"  # M√†u x√°m nh·∫°t n·∫øu kh√¥ng c√≥ deadline

    try:
        # ƒê·∫∑t m√∫i gi·ªù Vi·ªát Nam
        local_tz = ZoneInfo("Asia/Ho_Chi_Minh")
        
        # Chuy·ªÉn ƒë·ªïi deadline v√† th·ªùi gian hi·ªán t·∫°i sang c√πng m√∫i gi·ªù
        due_date = datetime.fromisoformat(due_date_str).astimezone(local_tz)
        now = datetime.now(local_tz)
        
        time_remaining = due_date - now
        days_remaining = time_remaining.days

        if days_remaining < 3:
            return "#ffebee"  # ƒê·ªè nh·∫°t
        elif 3 <= days_remaining < 7:
            return "#fff3e0"  # Cam nh·∫°t
        elif 7 <= days_remaining < 15:
            return "#fffde7"  # V√†ng nh·∫°t
        else:
            return "#e8f5e9"  # Xanh nh·∫°t
            
    except (ValueError, TypeError):
        return "#f5f5f5"  # Tr·∫£ v·ªÅ m√†u x√°m n·∫øu c√≥ l·ªói
    
def sanitize_filename(filename: str) -> str:
    """
    "L√†m s·∫°ch" t√™n file: chuy·ªÉn th√†nh ch·ªØ kh√¥ng d·∫•u, b·ªè k√Ω t·ª± ƒë·∫∑c bi·ªát,
    thay th·∫ø kho·∫£ng tr·∫Øng b·∫±ng g·∫°ch n·ªëi.
    """
    # Chuy·ªÉn chu·ªói unicode (c√≥ d·∫•u) th√†nh d·∫°ng g·∫ßn nh·∫•t kh√¥ng d·∫•u
    value = unicodedata.normalize('NFKD', filename).encode('ascii', 'ignore').decode('ascii')
    # Lo·∫°i b·ªè c√°c k√Ω t·ª± kh√¥ng ph·∫£i l√† ch·ªØ, s·ªë, d·∫•u g·∫°ch d∆∞·ªõi, g·∫°ch n·ªëi, d·∫•u ch·∫•m
    value = re.sub(r'[^\w\s.-]', '', value).strip()
    # Thay th·∫ø m·ªôt ho·∫∑c nhi·ªÅu kho·∫£ng tr·∫Øng/g·∫°ch n·ªëi b·∫±ng m·ªôt g·∫°ch n·ªëi duy nh·∫•t
    value = re.sub(r'[-\s]+', '-', value)
    return value

@st.cache_data(ttl=60)
def fetch_read_statuses(_supabase_client: Client, user_id: str):
    """Fetches all read statuses for the user, returns a dict of task_id -> UTC datetime."""
    try:
        response = _supabase_client.table('task_read_status').select('task_id, last_read_at').eq('user_id', user_id).execute()
        if response.data:
            # Lu√¥n chuy·ªÉn ƒë·ªïi sang UTC ƒë·ªÉ so s√°nh nh·∫•t qu√°n
            return {item['task_id']: datetime.fromisoformat(item['last_read_at']).astimezone(timezone.utc) for item in response.data}
        return {}
    except Exception as e:
        st.error(f"L·ªói khi t·∫£i tr·∫°ng th√°i ƒë√£ ƒë·ªçc: {e}")
        return {}

def mark_task_as_read(_supabase_client: Client, task_id: int, user_id: str):
    """Upserts the last read time for a user and a task using current UTC time."""
    try:
        # TH√äM on_conflict='task_id, user_id' ƒë·ªÉ Supabase bi·∫øt c√°ch x·ª≠ l√Ω tr√πng l·∫∑p
        _supabase_client.table('task_read_status').upsert(
            {
                'task_id': task_id,
                'user_id': user_id,
                'last_read_at': datetime.now(timezone.utc).isoformat()
            },
            on_conflict='task_id, user_id'  # D√≤ng quan tr·ªçng ƒë∆∞·ª£c th√™m v√†o
        ).execute()
    except Exception as e:
        # In ra l·ªói chi ti·∫øt h∆°n ƒë·ªÉ d·ªÖ ch·∫©n ƒëo√°n n·∫øu v·∫´n x·∫£y ra
        print(f"Kh√¥ng th·ªÉ ƒë√°nh d·∫•u ƒë√£ ƒë·ªçc cho task {task_id}: {e}")

# H√ÄM CH·∫®N ƒêO√ÅN D√ÄNH RI√äNG CHO MANAGER_APP.PY
def add_comment(task_id: int, user_id: str, content: str, uploaded_file=None):
    """Th√™m b√¨nh lu·∫≠n m·ªõi, v·ªõi file ƒë√≠nh k√®m ƒë√£ ƒë∆∞·ª£c l√†m s·∫°ch t√™n."""
    attachment_url = None
    attachment_original_name = None 

    if uploaded_file:
        if uploaded_file.size > 2 * 1024 * 1024:
            st.error("L·ªói: K√≠ch th∆∞·ªõc file kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° 2MB.")
            return

        # L∆∞u l·∫°i t√™n g·ªëc ƒë·ªÉ hi·ªÉn th·ªã
        attachment_original_name = uploaded_file.name
        
        # FIX: L√†m s·∫°ch t√™n file tr∆∞·ªõc khi t·∫°o ƒë∆∞·ªùng d·∫´n
        sanitized_name = sanitize_filename(uploaded_file.name)
        file_path = f"task_{task_id}/{user_id}_{int(datetime.now().timestamp())}_{sanitized_name}"
        
        try:
            # D√πng client 'supabase_new' cho manager
            supabase_new.storage.from_("task-attachments").upload(
                file=uploaded_file.getvalue(),
                path=file_path,
                file_options={"content-type": uploaded_file.type}
            )
            attachment_url = supabase_new.storage.from_("task-attachments").get_public_url(file_path)
        except Exception as e:
            st.error(f"L·ªói khi t·∫£i file l√™n: {e}")
            return

    try:
        insert_data = {
            'task_id': task_id,
            'user_id': user_id,
            'content': content,
            'attachment_url': attachment_url,
            'attachment_original_name': attachment_original_name
        }
        # D√πng client 'supabase_new' cho manager
        supabase_new.table('comments').insert(insert_data).execute()
        st.cache_data.clear()
        st.toast("ƒê√£ g·ª≠i b√¨nh lu·∫≠n!", icon="üí¨")
    except Exception as e:
        st.error(f"L·ªói khi th√™m b√¨nh lu·∫≠n: {e}")
        
def update_account_status(user_id: str, new_status: str):
    """
    Updates the account status for a user in both the profiles table
    and Supabase Auth system.
    'active' -> enables login, 'inactive' -> disables login.
    """
    try:
        ban_duration = '876000h' if new_status == 'inactive' else 'none'
        
        supabase_new.auth.admin.update_user_by_id(
            user_id,
            attributes={'ban_duration': ban_duration}
        )

        supabase_new.table('profiles').update({'account_status': new_status}).eq('id', user_id).execute()
        
        st.cache_data.clear()
        st.toast(f"ƒê√£ {'v√¥ hi·ªáu h√≥a' if new_status == 'inactive' else 'k√≠ch ho·∫°t'} t√†i kho·∫£n th√†nh c√¥ng!", icon="‚úÖ")
        st.rerun()

    except Exception as e:
        st.error("Y√™u c·∫ßu t·ªõi Supabase Auth TH·∫§T B·∫†I!")
        st.exception(e)

def update_task_details(task_id: int, updates: dict):
    """C·∫≠p nh·∫≠t c√°c tr∆∞·ªùng c·ª• th·ªÉ cho m·ªôt c√¥ng vi·ªác."""
    try:
        supabase_new.table('tasks').update(updates).eq('id', task_id).execute()
        st.cache_data.clear()
        st.toast("C·∫≠p nh·∫≠t c√¥ng vi·ªác th√†nh c√¥ng!", icon="‚úÖ")
    except Exception as e:
        st.error(f"L·ªói khi c·∫≠p nh·∫≠t c√¥ng vi·ªác: {e}")

def update_task_assignee(task_id: int, new_assignee_id: str):
    """Updates the assignee for a specific task."""
    try:
        supabase_new.table('tasks').update({'assigned_to': new_assignee_id}).eq('id', task_id).execute()
        st.cache_data.clear()
        st.toast("ƒê√£ chuy·ªÉn giao c√¥ng vi·ªác!", icon="üîÑ")
    except Exception as e:
        st.error(f"L·ªói khi chuy·ªÉn giao c√¥ng vi·ªác: {e}")

def delete_task(task_id: int):
    """
    X√≥a m·ªôt c√¥ng vi·ªác, c√°c b√¨nh lu·∫≠n li√™n quan (th√¥ng qua cascade delete trong CSDL),
    v√† t·∫•t c·∫£ c√°c file ƒë√≠nh k√®m c·ªßa n√≥ trong Storage.
    """
    try:
        folder_path = f"task_{task_id}"
        attachment_files = supabase_new.storage.from_("task-attachments").list(path=folder_path)

        if attachment_files:
            files_to_remove = [f"{folder_path}/{file['name']}" for file in attachment_files]
            if files_to_remove:
                st.info(f"ƒêang x√≥a {len(files_to_remove)} t·ªáp ƒë√≠nh k√®m li√™n quan...")
                supabase_new.storage.from_("task-attachments").remove(files_to_remove)
                st.info("ƒê√£ x√≥a th√†nh c√¥ng c√°c t·ªáp ƒë√≠nh k√®m.")

        response = supabase_new.table('tasks').delete().eq('id', task_id).execute()

        if hasattr(response, 'error') and response.error:
            raise Exception(f"L·ªói CSDL: {response.error.message}")

        st.cache_data.clear()
        st.toast("ƒê√£ x√≥a c√¥ng vi·ªác v√† c√°c file ƒë√≠nh k√®m th√†nh c√¥ng!", icon="üóëÔ∏è")

    except Exception as e:
        error_str = str(e)
        if "StorageError" in error_str:
             st.error(f"L·ªói khi x√≥a file tr√™n Storage: {e}")
        else:
             st.error(f"L·ªói khi x√≥a c√¥ng vi·ªác: {e}")

def delete_project(project_id: int):
    """Deletes a project if it has no associated tasks."""
    try:
        task_check = supabase_new.table('tasks').select('id', count='exact').eq('project_id', project_id).execute()
        if task_check.count > 0:
            st.error(f"Kh√¥ng th·ªÉ x√≥a d·ª± √°n. V·∫´n c√≤n {task_check.count} c√¥ng vi·ªác thu·ªôc d·ª± √°n n√†y.")
            return
        
        supabase_new.table('projects').delete().eq('id', project_id).execute()
        st.cache_data.clear()
        st.toast("ƒê√£ x√≥a d·ª± √°n th√†nh c√¥ng!", icon="üóëÔ∏è")
    except Exception as e:
        st.error(f"L·ªói khi x√≥a d·ª± √°n: {e}")


def delete_employee(user_id: str):
    """
    X√≥a ng∆∞·ªùi d√πng kh·ªèi Supabase Auth v√† h·ªì s∆° t∆∞∆°ng ·ª©ng trong b·∫£ng public.
    """
    try:
        supabase_new.auth.admin.delete_user(user_id)
        profile_response = supabase_new.table('profiles').delete().eq('id', user_id).execute()

        if hasattr(profile_response, 'error') and profile_response.error:
            st.warning(f"Ng∆∞·ªùi d√πng ƒë√£ ƒë∆∞·ª£c x√≥a kh·ªèi h·ªá th·ªëng x√°c th·ª±c, nh∆∞ng c√≥ l·ªói khi x√≥a h·ªì s∆°: {profile_response.error.message}")

        st.cache_data.clear()
        st.toast("ƒê√£ x√≥a nh√¢n vi√™n th√†nh c√¥ng!", icon="üóëÔ∏è")
        if 'user_to_delete' in st.session_state:
            del st.session_state.user_to_delete
        st.rerun()

    except Exception as e:
        error_str = str(e).lower()
        if "violates foreign key constraint" in error_str:
            st.error("X√≥a th·∫•t b·∫°i! Nh√¢n vi√™n n√†y ƒë√£ c√≥ d·ªØ li·ªáu li√™n quan (c√¥ng vi·ªác ƒë√£ t·∫°o, b√¨nh lu·∫≠n,...).", icon="üõ°Ô∏è")
        else:
            st.error(f"L·ªói khi x√≥a ng∆∞·ªùi d√πng: {e}")

        if 'user_to_delete' in st.session_state:
            del st.session_state.user_to_delete
        st.rerun()

def get_or_create_project_in_new_db(project_from_old: dict) -> int:
    ref_id = project_from_old.get('quotation_no')
    if not ref_id: raise ValueError("D·ªØ li·ªáu d·ª± √°n t·ª´ h·ªá th·ªëng c≈© thi·∫øu 'quotation_no'.")
    try:
        response = supabase_new.table('projects').select('id').eq('old_project_ref_id', ref_id).limit(1).execute()
    except Exception as e:
        raise Exception(f"L·ªói m·∫°ng khi ki·ªÉm tra d·ª± √°n t·ªìn t·∫°i: {e}")
    if not hasattr(response, 'data'): raise Exception("Ph·∫£n h·ªìi t·ª´ Supabase kh√¥ng h·ª£p l·ªá khi ki·ªÉm tra d·ª± √°n.")
    if response.data: return response.data[0]['id']
    else:
        st.info(f"D·ª± √°n v·ªõi m√£ '{ref_id}' ch∆∞a c√≥. ƒêang ƒë·ªìng b·ªô...")
        new_project_data = {
            'project_name': f"{project_from_old.get('customer_name')} - {project_from_old.get('project_type')}",
            'description': f"D·ª± √°n ƒë∆∞·ª£c ƒë·ªìng b·ªô t·ª´ h·ªá th·ªëng c≈© v·ªõi m√£: {ref_id}",
            'old_project_ref_id': ref_id
        }
        try:
            insert_res = supabase_new.table('projects').insert(new_project_data).execute()
        except Exception as e:
            raise Exception(f"L·ªói m·∫°ng khi t·∫°o d·ª± √°n ƒë·ªìng b·ªô: {e}")
        if not hasattr(insert_res, 'data'): raise Exception("Ph·∫£n h·ªìi t·ª´ Supabase kh√¥ng h·ª£p l·ªá khi t·∫°o d·ª± √°n ƒë·ªìng b·ªô.")
        if insert_res.data:
            st.success(f"ƒê·ªìng b·ªô th√†nh c√¥ng d·ª± √°n '{new_project_data['project_name']}'.")
            return insert_res.data[0]['id']
        else:
            error_message = getattr(insert_res.error, 'message', 'L·ªói kh√¥ng x√°c ƒë·ªãnh')
            raise Exception(f"Kh√¥ng th·ªÉ t·∫°o d·ª± √°n ƒë·ªìng b·ªô: {error_message}")

def change_password(new_password: str):
    """Updates the password for the currently logged-in user."""
    try:
        supabase_auth.auth.update_user({"password": new_password})
        st.success("‚úÖ ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng! Vui l√≤ng s·ª≠ d·ª•ng m·∫≠t kh·∫©u m·ªõi ·ªü l·∫ßn ƒëƒÉng nh·∫≠p sau.")
    except Exception as e:
        st.error(f"L·ªói khi ƒë·ªïi m·∫≠t kh·∫©u: {e}")

def reset_user_password(user_id: str, new_password: str):
    """Resets the password for a given user by an admin."""
    try:
        supabase_new.auth.admin.update_user_by_id(
            user_id,
            attributes={'password': new_password}
        )
        st.success(f"üîë ƒê√£ ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u cho ng∆∞·ªùi d√πng th√†nh c√¥ng!")
    except Exception as e:
        st.error(f"L·ªói khi ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u: {e}")


# --- MAIN APP LOGIC ---
if 'user' not in st.session_state:
    st.session_state.user = None
if 'manager_profile' not in st.session_state:
    st.session_state.manager_profile = None

# --- Login UI ---
if st.session_state.user is None:
    if 'logout_message' in st.session_state:
        st.warning(st.session_state.logout_message)
        del st.session_state.logout_message # X√≥a th√¥ng b√°o ƒë·ªÉ kh√¥ng hi·ªÉn th·ªã l·∫°i

    st.title("üë®‚Äçüíº ƒêƒÉng nh·∫≠p Trang Qu·∫£n l√Ω")
    with st.form("login_form"):
        email = st.text_input("Email")
        password = st.text_input("M·∫≠t kh·∫©u", type="password")
        submitted = st.form_submit_button("ƒêƒÉng nh·∫≠p")
        if submitted:
            try:
                user_response = supabase_auth.auth.sign_in_with_password({"email": email, "password": password})
                user = user_response.user
                
                profile_res = supabase_new.table('profiles').select('id, full_name, role, account_status').eq('id', user.id).single().execute()
                profile_data = profile_res.data
                
                # <<< THAY ƒê·ªîI: Cho ph√©p c·∫£ 'manager' v√† 'admin' ƒëƒÉng nh·∫≠p
                if profile_data and profile_data.get('role') in ['manager', 'admin']:
                    if profile_data.get('account_status') == 'inactive':
                        st.error("T√†i kho·∫£n c·ªßa b·∫°n ƒë√£ b·ªã v√¥ hi·ªáu h√≥a. Vui l√≤ng li√™n h·ªá qu·∫£n tr·ªã vi√™n.")
                        supabase_auth.auth.sign_out()
                    else:
                        st.session_state.user = user
                        st.session_state.manager_profile = profile_data
                        st.rerun()
                else:
                    st.error("Truy c·∫≠p b·ªã t·ª´ ch·ªëi. B·∫°n kh√¥ng c√≥ quy·ªÅn qu·∫£n l√Ω ho·∫∑c qu·∫£n tr·ªã.")
                    supabase_auth.auth.sign_out()
            except Exception as e:
                st.error("Email ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng. Vui l√≤ng th·ª≠ l·∫°i.")

# --- Main App UI (after login) ---
else:
    # ===================================================================
    # B·∫ÆT ƒê·∫¶U: LOGIC KI·ªÇM TRA KH√îNG HO·∫†T ƒê·ªòNG
    # ===================================================================
    TIMEOUT_IN_SECONDS = 1800 # 30 ph√∫t

    is_expired = False
    if 'last_activity_time' in st.session_state:
        idle_duration = time.time() - st.session_state.last_activity_time
        if idle_duration > TIMEOUT_IN_SECONDS:
            is_expired = True

    if is_expired:
        st.error(
            "**Phi√™n l√†m vi·ªác ƒë√£ h·∫øt h·∫°n!** "
            "ƒê·ªÉ b·∫£o m·∫≠t, m·ªçi thao t√°c ƒë√£ ƒë∆∞·ª£c v√¥ hi·ªáu h√≥a. "
            "Vui l√≤ng sao ch√©p l·∫°i n·ªôi dung b·∫°n ƒëang so·∫°n (n·∫øu c√≥), sau ƒë√≥ **ƒêƒÉng xu·∫•t** v√† ƒëƒÉng nh·∫≠p l·∫°i."
        )
    else:
        st.session_state.last_activity_time = time.time()
    # ===================================================================
    # K·∫æT TH√öC: LOGIC KI·ªÇM TRA KH√îNG HO·∫†T ƒê·ªòNG
    # ===================================================================
    manager_profile = st.session_state.manager_profile
    user = st.session_state.user
    
    # <<< THAY ƒê·ªîI: L·∫•y vai tr√≤ c·ªßa ng∆∞·ªùi d√πng ƒëang ƒëƒÉng nh·∫≠p
    current_user_role = manager_profile.get('role')

    st.sidebar.title(f"Xin ch√†o, {manager_profile.get('full_name', user.email)}!")
    st.sidebar.caption(f"Vai tr√≤: {current_user_role.capitalize()}") # Hi·ªÉn th·ªã vai tr√≤
    if st.sidebar.button("ƒêƒÉng xu·∫•t", use_container_width=True):
        supabase_auth.auth.sign_out()
        st.session_state.user = None
        st.session_state.manager_profile = None
        st.rerun()
    
    if st.sidebar.button("üîÑ L√†m m·ªõi d·ªØ li·ªáu", use_container_width=True):
        st.cache_data.clear()
        st.toast("ƒê√£ l√†m m·ªõi d·ªØ li·ªáu!", icon="üîÑ")
        st.rerun()

    st.title("üë®‚Äçüíº H·ªá th·ªëng Qu·∫£n l√Ω C√¥ng vi·ªác")

    # --- DATA LOADING ---
    projects_data_old = fetch_old_projects(supabase_old)
    all_profiles_data = fetch_all_profiles(supabase_new)
    all_tasks = fetch_all_tasks_and_details(supabase_new)
    all_projects_new = fetch_all_projects_new(supabase_new)
    active_employees = [p for p in all_profiles_data if p.get('role') == 'employee' and p.get('account_status') == 'active'] if all_profiles_data else []


    # --- Tabs for navigation ---
    tab_tasks, tab_employees, tab_projects, tab_settings = st.tabs([
        "C√¥ng vi·ªác & Giao vi·ªác", 
        "Qu·∫£n l√Ω Nh√¢n vi√™n", 
        "Qu·∫£n l√Ω D·ª± √°n", 
        "‚öôÔ∏è C√†i ƒë·∫∑t T√†i kho·∫£n"
    ])

    with tab_tasks:
        st.header("‚úçÔ∏è Giao vi·ªác m·ªõi")
        if not projects_data_old:
            st.warning("C·∫ßn c√≥ d·ªØ li·ªáu d·ª± √°n t·ª´ h·ªá th·ªëng c≈© ƒë·ªÉ c√≥ th·ªÉ giao vi·ªác.")
        elif not active_employees:
            st.warning("CH∆ØA C√ì NH√ÇN VI√äN (active employee) TRONG H·ªÜ TH·ªêNG M·ªöI.")
        else:
            du_an_dang_thuc_hien = [p for p in projects_data_old if p.get('status') == 'ƒêang th·ª±c hi·ªán']
            with st.form("new_task_form", clear_on_submit=True):
                st.subheader("Nh·∫≠p th√¥ng tin c√¥ng vi·ªác")
                col1_task, col2_task = st.columns(2)
                with col1_task:
                    project_options_map = {f"{p['customer_name']} - {p['project_type']} (M√£: {p['quotation_no']})": p for p in du_an_dang_thuc_hien}
                    selected_project_display = st.selectbox("1. Ch·ªçn D·ª± √°n/V·ª• vi·ªác:", options=project_options_map.keys(),disabled=is_expired)
                    task_name = st.text_input("2. T√™n c√¥ng vi·ªác:", placeholder="VD: So·∫°n th·∫£o h·ª£p ƒë·ªìng mua b√°n...",disabled=is_expired)
                    employee_options = {f"{e['full_name']} ({e['email']})": e['id'] for e in active_employees}
                    selected_employee_display = st.selectbox("3. Giao cho nh√¢n vi√™n:", options=employee_options.keys(), disabled=is_expired)
                with col2_task:
                    priority = st.selectbox("4. ƒê·ªô ∆∞u ti√™n:", options=['Medium', 'High', 'Low'], index=0, disabled=is_expired)
                    local_tz = ZoneInfo("Asia/Ho_Chi_Minh")
                    current_time_vn = datetime.now(local_tz)
                    deadline_date = st.date_input("5. H·∫°n ch√≥t (ng√†y):", min_value=current_time_vn.date(), disabled=is_expired)
                    deadline_hour = st.time_input("6. H·∫°n ch√≥t (gi·ªù):", value=current_time_vn.time(), disabled=is_expired)
                    description = st.text_area("7. M√¥ t·∫£ chi ti·∫øt:", height=150, disabled=is_expired)
                submitted = st.form_submit_button("üöÄ Giao vi·ªác", disabled= is_expired)
                if submitted and not is_expired:
                    due_date = datetime.combine(deadline_date, deadline_hour)
                    if not task_name:
                        st.error("Vui l√≤ng nh·∫≠p t√™n c√¥ng vi·ªác!")
                    else:
                        try:
                            selected_project_from_old = project_options_map[selected_project_display]
                            project_id_in_new = get_or_create_project_in_new_db(selected_project_from_old)
                            assigned_to_id = employee_options[selected_employee_display]
                            creator_id = user.id
                            due_date_iso = due_date.isoformat()
                            new_task_data = {'task_name': task_name, 'description': description, 'priority': priority, 'due_date': due_date_iso, 'assigned_to': assigned_to_id, 'created_by': creator_id, 'status': 'To Do', 'project_id': project_id_in_new}
                            response = supabase_new.table('tasks').insert(new_task_data).execute()
                            if response.data:
                                st.success(f"Giao vi·ªác '{task_name}' cho nh√¢n vi√™n th√†nh c√¥ng!")
                                st.cache_data.clear()
                                st.rerun()
                            else:
                                st.error(f"C√≥ l·ªói x·∫£y ra khi giao vi·ªác. Chi ti·∫øt: {response.error.message if response.error else 'L·ªói kh√¥ng x√°c ƒë·ªãnh'}")
                        except Exception as e:
                            st.error(f"L·ªói h·ªá th·ªëng: {e}")

        st.markdown("---")
        st.header("üìä Danh s√°ch c√¥ng vi·ªác ƒë√£ giao")
        st.markdown("""
        <style>
        .color-box {
            width: 15px;
            height: 15px;
            display: inline-block;
            border: 1px solid #ccc;
            vertical-align: middle;
            margin-right: 5px;
        }
        </style>
        <b>Ch√∫ th√≠ch Deadline:</b>
        <span class="color-box" style="background-color: #ffebee;"></span> < 3 ng√†y
        <span class="color-box" style="background-color: #fff3e0;"></span> 3-7 ng√†y
        <span class="color-box" style="background-color: #fffde7;"></span> 7-15 ng√†y
        <span class="color-box" style="background-color: #e8f5e9;"></span> > 15 ng√†y
        """, unsafe_allow_html=True)
        st.text("") 

        group_by = st.radio(
            "Nh√≥m c√¥ng vi·ªác theo:",
            ('D·ª± √°n', 'Nh√¢n vi√™n'),
            horizontal=True,
            key="grouping_tasks"
        )

        if not all_tasks:
            st.info("Ch∆∞a c√≥ c√¥ng vi·ªác n√†o ƒë∆∞·ª£c giao trong h·ªá th·ªëng.")
        else:
            local_tz = ZoneInfo("Asia/Ho_Chi_Minh")
            read_statuses = fetch_read_statuses(supabase_new, user.id) 
            
            # --- B∆∞·ªõc 1: Nh√≥m c√°c c√¥ng vi·ªác l·∫°i nh∆∞ c≈© ---
            grouped_tasks = defaultdict(list)
            if group_by == 'D·ª± √°n':
                for task in all_tasks:
                    project_info = task.get('projects')
                    key = (project_info.get('project_name', 'D·ª± √°n kh√¥ng t√™n'), project_info.get('old_project_ref_id')) if project_info else ('Kh√¥ng thu·ªôc d·ª± √°n c·ª• th·ªÉ', None)
                    grouped_tasks[key].append(task)
            else: # Nh√≥m theo Nh√¢n vi√™n
                for task in all_tasks:
                    grouped_tasks[task.get('assignee_name', 'Ch∆∞a giao cho ai')].append(task)

            # --- B∆∞·ªõc 2: T·∫°o h·ªôp t√¨m ki·∫øm/ch·ªçn l·ª±a ---
            group_keys = sorted(grouped_tasks.keys(), key=str)
            
            if group_by == 'D·ª± √°n':
                # ƒê·ªãnh d·∫°ng l·∫°i t√™n hi·ªÉn th·ªã cho c√°c d·ª± √°n
                options_map = {f"{name} (M√£: {code})" if code else name: key for key, (name, code) in zip(group_keys, group_keys)}
                label = "üîç T√¨m v√† nh·∫£y ƒë·∫øn D·ª± √°n"
            else: # Nh√≥m theo Nh√¢n vi√™n
                # T√™n nh√¢n vi√™n l√† key
                options_map = {key: key for key in group_keys}
                label = "üîç T√¨m v√† nh·∫£y ƒë·∫øn Nh√¢n vi√™n"
                
            # Th√™m l·ª±a ch·ªçn "Hi·ªÉn th·ªã t·∫•t c·∫£" v√†o ƒë·∫ßu danh s√°ch
            options_list = ["--- Hi·ªÉn th·ªã t·∫•t c·∫£ ---"] + list(options_map.keys())
            
            selected_option = st.selectbox(label, options=options_list)
            st.divider()

            # --- B∆∞·ªõc 3: L·ªçc d·ªØ li·ªáu d·ª±a tr√™n l·ª±a ch·ªçn c·ªßa ng∆∞·ªùi d√πng ---
            if selected_option and selected_option != "--- Hi·ªÉn th·ªã t·∫•t c·∫£ ---":
                selected_key = options_map[selected_option]
                tasks_to_display = {selected_key: grouped_tasks[selected_key]}
            else:
                # N·∫øu kh√¥ng ch·ªçn g√¨ ho·∫∑c ch·ªçn "Hi·ªÉn th·ªã t·∫•t c·∫£" th√¨ gi·ªØ nguy√™n
                tasks_to_display = grouped_tasks

            # --- B∆∞·ªõc 4: Hi·ªÉn th·ªã danh s√°ch c√¥ng vi·ªác ƒë√£ ƒë∆∞·ª£c l·ªçc ---
            sorted_grouped_tasks = sorted(tasks_to_display.items(), key=lambda item: str(item[0]))

            if not sorted_grouped_tasks:
                st.info("Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£ ph√π h·ª£p.")
                
            for key, tasks_in_group in sorted_grouped_tasks:
                if group_by == 'D·ª± √°n':
                    project_name, project_code = key
                    display_title = f"D·ª± √°n: {project_name}" + (f" (M√£: {project_code})" if project_code else "")
                else:
                    display_title = f"Nh√¢n vi√™n: {key}"
                st.subheader(display_title)
                
                # S·∫Øp x·∫øp theo deadline tƒÉng d·∫ßn, nhi·ªám v·ª• kh√¥ng c√≥ deadline s·∫Ω xu·ªëng cu·ªëi
                sorted_tasks = sorted(tasks_in_group, key=lambda t: (t.get('due_date') is None, t.get('due_date')))
                task_counter = 0

                for task in sorted_tasks:
                    # --- Ph·∫ßn code hi·ªÉn th·ªã chi ti·∫øt m·ªói c√¥ng vi·ªác (gi·ªØ nguy√™n nh∆∞ c≈©) ---
                    task_counter += 1
                    comments = fetch_comments(task['id'])
                    
                    status_icon = ""
                    has_new_message = False
                    last_read_time_utc = read_statuses.get(task['id'], datetime.fromtimestamp(0, tz=timezone.utc))
                    last_event_time_utc = datetime.fromisoformat(task['created_at']).astimezone(timezone.utc)
                    if comments:
                        last_comment_time_utc = datetime.fromisoformat(comments[0]['created_at']).astimezone(timezone.utc)
                        if last_comment_time_utc > last_event_time_utc:
                            last_event_time_utc = last_comment_time_utc
                    if comments and comments[0]['user_id'] == user.id:
                        status_icon = "‚úÖ ƒê√£ tr·∫£ l·ªùi"
                    elif last_event_time_utc > last_read_time_utc:
                        status_icon = "üí¨ M·ªõi!"
                        has_new_message = True
                    elif comments:
                        status_icon = "‚úîÔ∏è ƒê√£ xem"

                    is_overdue = False
                    if task.get('due_date'):
                        try:
                            due_date = datetime.fromisoformat(task['due_date']).astimezone(local_tz)
                            if due_date < datetime.now(local_tz):
                                is_overdue = True
                        except (ValueError, TypeError):
                            is_overdue = False

                    line_1 = f"**Task {task_counter}. {task['task_name']}**"
                    try:
                        formatted_due_date = datetime.fromisoformat(task['due_date']).astimezone(local_tz).strftime('%d/%m/%Y, %H:%M')
                    except (ValueError, TypeError):
                        formatted_due_date = 'N/A'
                    
                    line_2_parts = [status_icon, f"Tr·∫°ng th√°i th·ª±c hi·ªán: *{task['status']}*"]
                    if group_by == 'D·ª± √°n':
                        line_2_parts.append(f"Ng∆∞·ªùi th·ª±c hi·ªán: *{task.get('assignee_name', 'N/A')}*")
                    else:
                        project_name_display = task.get('projects', {}).get('project_name', 'N/A')
                        line_2_parts.append(f"D·ª± √°n: *_{project_name_display}_*")
                    
                    line_2_parts.append(f"Deadline: *{formatted_due_date}*")
                    line_2 = " | ".join(filter(None, line_2_parts))

                    deadline_color = get_deadline_color(task.get('due_date'))
                    st.markdown(f'<div style="background-color: {deadline_color}; border-radius: 7px; padding: 10px; margin-bottom: 10px;">', unsafe_allow_html=True)
                    
                    st.markdown(f"<span style='color: blue;'>{line_1}</span>", unsafe_allow_html=True)
                    st.markdown(line_2)

                    if is_overdue and task.get('status') != 'Done':
                        st.markdown("<span style='color: red;'><b>L∆∞u √Ω: Nhi·ªám v·ª• ƒë√£ qu√° h·∫°n ho·∫∑c ƒë√£ l√†m xong nh∆∞ng nh√¢n vi√™n ch∆∞a chuy·ªÉn tr·∫°ng th√°i Done</b></span>", unsafe_allow_html=True)

                    with st.expander("Chi ti·∫øt & Th·∫£o lu·∫≠n"):
                        # ... (To√†n b·ªô code trong expander gi·ªØ nguy√™n y h·ªát nh∆∞ c≈©) ...
                        if has_new_message:
                            if st.button("‚úîÔ∏è ƒê√°nh d·∫•u ƒë√£ ƒë·ªçc", key=f"read_mgr_{task['id']}", help="B·∫•m v√†o ƒë√¢y ƒë·ªÉ x√°c nh·∫≠n b·∫°n ƒë√£ xem tin nh·∫Øn m·ªõi nh·∫•t.", disabled=is_expired) and not is_expired:
                                mark_task_as_read(supabase_new, task['id'], user.id)
                                fetch_read_statuses.clear()
                                st.rerun()
                            st.divider()

                        if st.toggle("‚úèÔ∏è Ch·ªânh s·ª≠a c√¥ng vi·ªác", key=f"edit_toggle_{task['id']}",disabled= is_expired):
                            with st.form(key=f"edit_form_{task['id']}", clear_on_submit=True):
                                st.markdown("##### **üìù C·∫≠p nh·∫≠t th√¥ng tin c√¥ng vi·ªác**")
                                new_task_name = st.text_input("T√™n c√¥ng vi·ªác", value=task.get('task_name', ''))
                                project_options_map_edit = {p['project_name']: p['id'] for p in all_projects_new} if all_projects_new else {}
                                project_names = list(project_options_map_edit.keys())
                                employee_options_map = {e['full_name']: e['id'] for e in active_employees}
                                employee_names = list(employee_options_map.keys())
                                priorities = ['Low', 'Medium', 'High']
                                current_project_name = task.get('projects', {}).get('project_name')
                                try:
                                    default_proj_index = project_names.index(current_project_name) if current_project_name else 0
                                except ValueError:
                                    default_proj_index = 0
                                current_assignee_name = task.get('assignee_name')
                                try:
                                    default_employee_index = employee_names.index(current_assignee_name) if current_assignee_name in employee_names else 0
                                except ValueError:
                                    default_employee_index = 0
                                try:
                                    default_prio_index = priorities.index(task.get('priority')) if task.get('priority') else 1
                                except ValueError:
                                    default_prio_index = 1
                                try:
                                    current_due_datetime = datetime.fromisoformat(task['due_date']).astimezone(local_tz)
                                except (ValueError, TypeError):
                                    current_due_datetime = datetime.now(local_tz)
                                col1, col2 = st.columns(2)
                                with col1:
                                    new_project_name = st.selectbox("D·ª± √°n", options=project_names, index=default_proj_index, key=f"proj_edit_{task['id']}")
                                with col2:
                                    new_assignee_name = st.selectbox("Giao cho nh√¢n vi√™n", options=employee_names, index=default_employee_index, key=f"assignee_edit_{task['id']}")
                                col3, col4, col5 = st.columns(3)
                                with col3:
                                    new_priority = st.selectbox("ƒê·ªô ∆∞u ti√™n", options=priorities, index=default_prio_index, key=f"prio_edit_{task['id']}")
                                with col4:
                                    new_due_date = st.date_input("H·∫°n ch√≥t (ng√†y)", value=current_due_datetime.date(), key=f"date_edit_{task['id']}")
                                with col5:
                                    new_due_time = st.time_input("H·∫°n ch√≥t (gi·ªù)", value=current_due_datetime.time(), key=f"time_edit_{task['id']}")
                                submitted_edit = st.form_submit_button("üíæ L∆∞u thay ƒë·ªïi", use_container_width=True, type="primary",disabled=is_expired)
                                if submitted_edit and not is_expired:
                                    updates_dict = {}
                                    if new_task_name and new_task_name != task.get('task_name'):
                                        updates_dict['task_name'] = new_task_name
                                    selected_project_id = project_options_map_edit.get(new_project_name)
                                    if selected_project_id and selected_project_id != task.get('project_id'):
                                        updates_dict['project_id'] = selected_project_id
                                    selected_employee_id = employee_options_map.get(new_assignee_name)
                                    if selected_employee_id and selected_employee_id != task.get('assigned_to'):
                                        updates_dict['assigned_to'] = selected_employee_id
                                    if new_priority != task.get('priority'):
                                        updates_dict['priority'] = new_priority
                                    naive_deadline = datetime.combine(new_due_date, new_due_time)
                                    aware_deadline = naive_deadline.replace(tzinfo=local_tz)
                                    if aware_deadline.isoformat() != task.get('due_date'):
                                        updates_dict['due_date'] = aware_deadline.isoformat()
                                    if updates_dict:
                                        update_task_details(task['id'], updates_dict)
                                        st.toast("C·∫≠p nh·∫≠t th√†nh c√¥ng!", icon="‚úÖ")
                                        st.rerun()
                                    else:
                                        st.toast("Kh√¥ng c√≥ thay ƒë·ªïi n√†o ƒë·ªÉ l∆∞u.", icon="ü§∑‚Äç‚ôÇÔ∏è")

                        st.divider()
                        st.markdown("##### **Chi ti·∫øt & Th·∫£o lu·∫≠n**")
                        task_cols = st.columns([3, 1])
                        with task_cols[1]:
                            if st.button("üóëÔ∏è X√≥a C√¥ng vi·ªác", key=f"delete_task_{task['id']}", type="secondary", use_container_width=True,disabled=is_expired) and not is_expired:
                                st.session_state[f"confirm_delete_task_{task['id']}"] = True
                        if st.session_state.get(f"confirm_delete_task_{task['id']}"):
                            with st.warning(f"B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a vƒ©nh vi·ªÖn c√¥ng vi·ªác **{task['task_name']}**?"):
                                c1, c2 = st.columns(2)
                                if c1.button("‚úÖ X√≥a", key=f"confirm_del_btn_{task['id']}", type="primary") and not is_expired:
                                    delete_task(task['id'])
                                    del st.session_state[f"confirm_delete_task_{task['id']}"]
                                    st.rerun()
                                if c2.button("‚ùå H·ªßy", key=f"cancel_del_btn_{task['id']}"):
                                    del st.session_state[f"confirm_delete_task_{task['id']}"]
                                    st.rerun()
                        meta_cols = st.columns(3)
                        meta_cols[0].markdown("**ƒê·ªô ∆∞u ti√™n**")
                        meta_cols[0].write(task.get('priority', 'N/A'))
                        meta_cols[1].markdown("**H·∫°n ch√≥t**")
                        try:
                            formatted_due_date_detail = datetime.fromisoformat(task['due_date']).astimezone(local_tz).strftime('%d/%m/%Y, %H:%M')
                        except (ValueError, TypeError):
                            formatted_due_date_detail = task.get('due_date', 'N/A')
                        meta_cols[1].write(formatted_due_date_detail)
                        meta_cols[2].markdown("**Ng∆∞·ªùi giao**")
                        meta_cols[2].write(task.get('creator_name', 'N/A'))
                        if task['description']:
                            st.markdown("**M√¥ t·∫£:**")
                            st.info(task['description'])
                        st.divider()
                        st.markdown("##### **Th·∫£o lu·∫≠n**")
                        with st.container(height=250):
                            if not comments:
                                st.info("Ch∆∞a c√≥ b√¨nh lu·∫≠n n√†o.", icon="üìÑ")
                            else:
                                for comment in comments:
                                    commenter_name = comment.get('profiles', {}).get('full_name', "Ng∆∞·ªùi d√πng ·∫©n")
                                    is_manager_comment = 'manager' in comment.get('profiles', {}).get('role', 'employee')
                                    comment_time_local = datetime.fromisoformat(comment['created_at']).astimezone(local_tz).strftime('%H:%M, %d/%m/%Y')
                                    st.markdown(f"<div style='border-left: 3px solid {'#ff4b4b' if is_manager_comment else '#007bff'}; padding-left: 10px; margin-bottom: 10px;'><b>{commenter_name}</b> {'(Qu·∫£n l√Ω)' if is_manager_comment else ''} <span style='font-size: 0.8em; color: gray;'><i>({comment_time_local})</i></span>:<br>{comment['content']}</div>", unsafe_allow_html=True)
                                    if comment.get('attachment_url'):
                                        url = comment['attachment_url']
                                        file_name = comment.get('attachment_original_name', 'downloaded_file')
                                        try:
                                            response = requests.get(url)
                                            response.raise_for_status() 
                                            st.download_button(
                                                label="üìÇ T·∫£i file ƒë√≠nh k√®m",
                                                data=response.content,
                                                file_name=file_name,
                                                key=f"download_manager_{task['id']}_{comment['id']}"
                                            )
                                            st.caption(f"{file_name}")
                                        except requests.exceptions.RequestException as e:
                                            st.error(f"Kh√¥ng th·ªÉ t·∫£i t·ªáp: {e}")
                        with st.form(key=f"comment_form_manager_{task['id']}", clear_on_submit=True):
                            comment_content = st.text_area("Th√™m b√¨nh lu·∫≠n:", key=f"comment_text_manager_{task['id']}", label_visibility="collapsed", placeholder="Nh·∫≠p b√¨nh lu·∫≠n c·ªßa b·∫°n...", disabled=is_expired)
                            uploaded_file = st.file_uploader("ƒê√≠nh k√®m file (Word, RAR, ZIP <2MB)", type=['doc', 'docx', 'rar', 'zip'], accept_multiple_files=False, key=f"file_manager_{task['id']}", disabled=is_expired)
                            submitted_comment = st.form_submit_button("G·ª≠i b√¨nh lu·∫≠n",disabled=is_expired)
                            if submitted_comment and is_expired and (comment_content or uploaded_file):
                                st.warning("‚ö†Ô∏è N·ªôi dung c·ªßa b·∫°n CH∆ØA ƒê∆Ø·ª¢C G·ª¨I do phi√™n l√†m vi·ªác ƒë√£ h·∫øt h·∫°n. D∆∞·ªõi ƒë√¢y l√† b·∫£n sao ƒë·ªÉ b·∫°n ti·ªán l∆∞u l·∫°i:")
                                if comment_content:
                                    st.code(comment_content, language=None)
                                if uploaded_file:
                                    st.info(f"B·∫°n c≈©ng ƒë√£ ƒë√≠nh k√®m t·ªáp: **{uploaded_file.name}**. Vui l√≤ng t·∫£i l·∫°i t·ªáp n√†y sau khi ƒëƒÉng nh·∫≠p.")
                            if submitted_comment and (comment_content or uploaded_file) and not is_expired:
                                add_comment(task['id'], manager_profile['id'], comment_content, uploaded_file)
                                st.rerun()
                    st.markdown("</div>", unsafe_allow_html=True)


    with tab_employees:
        st.header("üë• Qu·∫£n l√Ω Nh√¢n vi√™n")
        
        # <<< THAY ƒê·ªîI: Ch·ªâ admin m·ªõi c√≥ quy·ªÅn th√™m nh√¢n vi√™n
        if current_user_role == 'admin':
            with st.expander("‚ûï Th√™m nh√¢n vi√™n m·ªõi"):
                with st.form("new_employee_form", clear_on_submit=True):
                    col1, col2 = st.columns(2)
                    with col1:
                        full_name = st.text_input("H·ªç v√† t√™n:", placeholder="Nguy·ªÖn VƒÉn A", disabled=is_expired)
                        email = st.text_input("Email:", placeholder="email@congty.com", disabled=is_expired)
                    with col2:
                        password = st.text_input("M·∫≠t kh·∫©u t·∫°m th·ªùi:", type="password", disabled=is_expired)
                        # <<< THAY ƒê·ªîI: Th√™m vai tr√≤ 'admin' v√† format t√™n cho d·ªÖ ƒë·ªçc
                        role = st.selectbox(
                            "Vai tr√≤:", 
                            options=['employee', 'manager', 'admin'], 
                            format_func=lambda x: "Nh√¢n vi√™n" if x == 'employee' else ("Qu·∫£n l√Ω" if x == 'manager' else "Qu·∫£n tr·ªã vi√™n"),
                            disabled=is_expired
                        )
                    
                    add_employee_submitted = st.form_submit_button("Th√™m nh√¢n vi√™n", use_container_width=True, disabled=is_expired)
                    if add_employee_submitted and not is_expired:
                        if not full_name or not email or not password:
                            st.error("Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin: H·ªç t√™n, Email v√† M·∫≠t kh·∫©u.")
                        else:
                            try:
                                new_user_res = supabase_new.auth.admin.create_user({"email": email, "password": password, "user_metadata": {'full_name': full_name}, "email_confirm": True})
                                new_user = new_user_res.user
                                if new_user:
                                    st.success(f"T·∫°o t√†i kho·∫£n cho '{full_name}' th√†nh c√¥ng!")
                                    # C·∫≠p nh·∫≠t c·∫£ role v√† full_name v√†o b·∫£ng profiles
                                    profile_update_res = supabase_new.table('profiles').update({'role': role, 'full_name': full_name, 'account_status': 'active'}).eq('id', new_user.id).execute()
                                    st.cache_data.clear()
                                    st.rerun()
                                else:
                                    st.error("C√≥ l·ªói x·∫£y ra t·ª´ Supabase khi t·∫°o ng∆∞·ªùi d√πng.")
                            except Exception as e:
                                st.error(f"L·ªói h·ªá th·ªëng: {'Email ƒë√£ t·ªìn t·∫°i' if 'User already exists' in str(e) else e}")
            st.markdown("---")


        st.subheader("Danh s√°ch nh√¢n vi√™n hi·ªán t·∫°i")

        if 'user_to_reset_pw' in st.session_state and st.session_state.user_to_reset_pw:
            user_to_reset = st.session_state.user_to_reset_pw
            with st.container(border=True):
                st.subheader(f"üîë ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u cho {user_to_reset.get('full_name')}")
                with st.form(key=f"reset_pw_form_{user_to_reset['id']}"):
                    new_password = st.text_input("Nh·∫≠p m·∫≠t kh·∫©u m·ªõi", type="password")
                    submitted = st.form_submit_button("X√°c nh·∫≠n ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u", type="primary", use_container_width=True)
                    if submitted:
                        if not new_password or len(new_password) < 6:
                            st.error("M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±.")
                        else:
                            reset_user_password(user_to_reset['id'], new_password)
                            del st.session_state.user_to_reset_pw
                            st.rerun()
                if st.button("H·ªßy b·ªè", key="cancel_reset_pw"):
                    del st.session_state.user_to_reset_pw
                    st.rerun()
            st.divider()

        if 'user_to_delete' in st.session_state and st.session_state.user_to_delete:
            user_name = st.session_state.user_to_delete['name']
            with st.container(border=True):
                st.warning(f"**X√°c nh·∫≠n x√≥a ng∆∞·ªùi d√πng**", icon="‚ö†Ô∏è")
                st.write(f"B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a vƒ©nh vi·ªÖn nh√¢n vi√™n **{user_name}**?")
                st.info("L∆∞u √Ω: B·∫°n s·∫Ω kh√¥ng th·ªÉ x√≥a nh√¢n vi√™n ƒë√£ c√≥ d·ªØ li·ªáu li√™n quan.", icon="‚ÑπÔ∏è")
                col1, col2 = st.columns(2)
                if col1.button("‚úÖ X√°c nh·∫≠n X√≥a", use_container_width=True, type="primary"):
                    delete_employee(st.session_state.user_to_delete['id'])
                if col2.button("‚ùå H·ªßy", use_container_width=True):
                    del st.session_state.user_to_delete
                    st.rerun()

        if all_profiles_data:
            c1, c2, c3, c4 = st.columns([2, 3, 2, 3])
            c1.markdown("**H·ªç v√† t√™n**")
            c2.markdown("**Email**")
            c3.markdown("**Tr·∫°ng th√°i**")
            c4.markdown("**H√†nh ƒë·ªông**")
            st.divider()

            for u in all_profiles_data:
                # Kh√¥ng cho ph√©p admin t·ª± thao t√°c v·ªõi ch√≠nh t√†i kho·∫£n c·ªßa m√¨nh
                if u['id'] == user.id:
                    continue

                col1, col2, col3, col4 = st.columns([2, 3, 2, 3])
                with col1:
                    st.write(u.get('full_name', 'N/A'))
                    # <<< THAY ƒê·ªîI: Hi·ªÉn th·ªã ƒë√∫ng t√™n vai tr√≤
                    role_display = "Qu·∫£n tr·ªã vi√™n" if u.get('role') == 'admin' else ("Qu·∫£n l√Ω" if u.get('role') == 'manager' else "Nh√¢n vi√™n")
                    st.caption(f"Vai tr√≤: {role_display}")
                with col2:
                    st.write(u.get('email', 'N/A'))
                with col3:
                    status = u.get('account_status', 'N/A')
                    st.write(f"üü¢ Ho·∫°t ƒë·ªông" if status == 'active' else f"‚ö™ V√¥ hi·ªáu h√≥a")
                with col4:
                    # <<< THAY ƒê·ªîI: Ch·ªâ admin m·ªõi th·∫•y c√°c n√∫t h√†nh ƒë·ªông
                    if current_user_role == 'admin':
                        action_cols = st.columns([1, 1, 1])
                        # N√∫t K√≠ch ho·∫°t / V√¥ hi·ªáu h√≥a
                        if status == 'active':
                            if action_cols[0].button("V√¥ hi·ªáu h√≥a", key=f"deact_{u['id']}", use_container_width=True, disabled=is_expired) and not is_expired:
                                update_account_status(u['id'], 'inactive')
                        else:
                            if action_cols[0].button("K√≠ch ho·∫°t", key=f"act_{u['id']}", use_container_width=True, type="primary", disabled=is_expired) and not is_expired:
                                update_account_status(u['id'], 'active')
                        
                        # N√∫t ƒê·∫∑t m·∫≠t kh·∫©u
                        if action_cols[1].button("üîë ƒê·∫∑t MK", key=f"reset_pw_{u['id']}", use_container_width=True, disabled=is_expired) and not is_expired:
                            st.session_state.user_to_reset_pw = u
                            st.rerun()

                        # N√∫t X√≥a
                        if action_cols[2].button("üóëÔ∏è X√≥a", key=f"del_{u['id']}", use_container_width=True, disabled=is_expired) and not is_expired:
                            st.session_state.user_to_delete = {'id': u['id'], 'name': u.get('full_name', 'N/A')}
                            st.rerun()
                st.divider()
        else:
            st.info("Ch∆∞a c√≥ nh√¢n vi√™n n√†o trong h·ªá th·ªëng m·ªõi.")


    with tab_projects:
        st.header("üóÇÔ∏è Qu·∫£n l√Ω D·ª± √°n")
        st.info("T·∫°i ƒë√¢y b·∫°n c√≥ th·ªÉ x√≥a c√°c d·ª± √°n ƒë√£ ho√†n th√†nh v√† kh√¥ng c√≤n c√¥ng vi·ªác n√†o li√™n quan.", icon="‚ÑπÔ∏è")

        if not all_projects_new:
            st.warning("Kh√¥ng c√≥ d·ª± √°n n√†o trong h·ªá th·ªëng m·ªõi.")
        else:
            if 'project_to_delete' in st.session_state and st.session_state.project_to_delete:
                project_name = st.session_state.project_to_delete['name']
                with st.container(border=True):
                    st.warning(f"**X√°c nh·∫≠n x√≥a d·ª± √°n**", icon="‚ö†Ô∏è")
                    st.write(f"B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a vƒ©nh vi·ªÖn d·ª± √°n **{project_name}**?")
                    col1, col2 = st.columns(2)
                    if col1.button("‚úÖ X√°c nh·∫≠n X√≥a D·ª± √°n", use_container_width=True, type="primary") and not is_expired:
                        delete_project(st.session_state.project_to_delete['id'])
                        del st.session_state.project_to_delete
                        st.rerun()
                    if col2.button("‚ùå H·ªßy", use_container_width=True):
                        del st.session_state.project_to_delete
                        st.rerun()

            df_projects = pd.DataFrame(all_projects_new)
            df_projects = df_projects.rename(columns={'project_name': 'T√™n D·ª± √°n', 'description': 'M√¥ t·∫£', 'created_at': 'Ng√†y t·∫°o'})
            
            c1, c2, c3 = st.columns([3, 4, 1])
            c1.markdown("**T√™n D·ª± √°n**")
            c2.markdown("**M√¥ t·∫£**")
            c3.markdown("**H√†nh ƒë·ªông**")

            for index, row in df_projects.iterrows():
                c1_proj, c2_proj, c3_proj = st.columns([3, 4, 1])
                c1_proj.write(row['T√™n D·ª± √°n'])
                c2_proj.caption(row['M√¥ t·∫£'])
                # <<< THAY ƒê·ªîI: Ch·ªâ admin m·ªõi c√≥ quy·ªÅn x√≥a d·ª± √°n
                if current_user_role == 'admin':
                    if c3_proj.button("üóëÔ∏è X√≥a", key=f"delete_project_{row['id']}", type="secondary",disabled=is_expired):
                        st.session_state.project_to_delete = {'id': row['id'], 'name': row['T√™n D·ª± √°n']}
                        st.rerun()

        st.markdown("---")
        with st.expander("üìã Danh s√°ch D·ª± √°n t·ª´ H·ªá th·ªëng C≈© (ƒë·ªÉ tham chi·∫øu)", expanded=False):
            if projects_data_old:
                df_projects_old = pd.DataFrame(projects_data_old)
                if 'status' in df_projects_old.columns:
                    all_statuses = df_projects_old['status'].dropna().unique().tolist()
                    selected_statuses = st.multiselect("L·ªçc theo tr·∫°ng th√°i d·ª± √°n:", options=all_statuses, default=all_statuses, key="old_project_filter")
                    df_display = df_projects_old[df_projects_old['status'].isin(selected_statuses)]
                else:
                    df_display = df_projects_old
                df_display = df_display.rename(columns={'quotation_no': 'S·ªë b√°o gi√°', 'customer_name': 'T√™n kh√°ch h√†ng', 'project_type': 'Lo·∫°i d·ª± √°n', 'status': 'Tr·∫°ng th√°i'})
                cols_to_display = [col for col in ['S·ªë b√°o gi√°', 'T√™n kh√°ch h√†ng', 'Lo·∫°i d·ª± √°n', 'Tr·∫°ng th√°i'] if col in df_display.columns]
                st.dataframe(df_display[cols_to_display], use_container_width=True)
            else:
                st.warning("Kh√¥ng t√¨m th·∫•y d·ª± √°n n√†o trong h·ªá th·ªëng c≈©.")
    
    with tab_settings:
        st.header("‚öôÔ∏è C√†i ƒë·∫∑t T√†i kho·∫£n c·ªßa b·∫°n")
        st.subheader("Thay ƒë·ªïi m·∫≠t kh·∫©u")

        with st.form("change_password_form", clear_on_submit=True):
            new_password = st.text_input("M·∫≠t kh·∫©u m·ªõi", type="password", disabled=is_expired)
            confirm_password = st.text_input("X√°c nh·∫≠n m·∫≠t kh·∫©u m·ªõi", type="password", disabled=is_expired)
            submitted = st.form_submit_button("L∆∞u thay ƒë·ªïi",disabled=is_expired)

            if submitted and not is_expired:
                if not new_password or not confirm_password:
                    st.warning("Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß m·∫≠t kh·∫©u m·ªõi v√† x√°c nh·∫≠n.")
                elif new_password != confirm_password:
                    st.error("M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp!")
                elif len(new_password) < 6:
                     st.error("M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±.")
                else:
                    change_password(new_password)