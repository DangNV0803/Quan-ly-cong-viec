import streamlit as st
from supabase import create_client, Client
import pandas as pd
from datetime import datetime, timezone
from collections import defaultdict
from itertools import groupby
import requests
from zoneinfo import ZoneInfo
import re
import unicodedata
import time

# --- Page Configuration ---
st.set_page_config(
    layout="centered",
    page_title="Trang Nh√¢n vi√™n",
    page_icon="üßë‚Äçüíª"
)

# --- Supabase Connection ---
@st.cache_resource
def init_supabase_client() -> Client:
    """Initializes and returns a Supabase client for employee app."""
    try:
        url = st.secrets["supabase_new"]["url"]
        key = st.secrets["supabase_new"]["anon_key"]
        return create_client(url, key)
    except Exception as e:
        st.error(f"L·ªói c·∫•u h√¨nh Supabase. Vui l√≤ng ki·ªÉm tra file .streamlit/secrets.toml. Chi ti·∫øt: {e}")
        st.stop()

supabase = init_supabase_client()

# --- Functions ---
@st.cache_data(ttl=60)
def fetch_my_tasks(user_id: str):
    """Fetches tasks assigned to the current logged-in user, ordered by due date."""
    try:
        response = supabase.table('tasks').select('*, projects(project_name, id, old_project_ref_id), is_completed_by_manager, manager:completed_by_manager_id(full_name), manager_rating, manager_review').eq('assigned_to', user_id).order('due_date', desc=False).execute()
        return response.data if response.data else []
    except Exception as e:
        st.error(f"L·ªói khi t·∫£i c√¥ng vi·ªác: {e}")
        return []

@st.cache_data(ttl=30)
def fetch_comments(task_id: int):
    """Fetches comments for a specific task, joining with profile info."""
    try:
        response = supabase.table('comments').select('*, profiles(full_name, role), attachment_url').eq('task_id', task_id).order('created_at', desc=True).execute()
        return response.data if response.data else []
    except Exception as e:
        st.error(f"L·ªói khi t·∫£i b√¨nh lu·∫≠n: {e}")
        return []

@st.cache_data(ttl=60)
def fetch_read_statuses(_supabase_client: Client, user_id: str):
    """Fetches all read statuses for the user, returns a dict of task_id -> UTC datetime."""
    try:
        response = _supabase_client.table('task_read_status').select('task_id, last_read_at').eq('user_id', user_id).execute()
        if response.data:
            # Lu√¥n chuy·ªÉn ƒë·ªïi sang UTC ƒë·ªÉ so s√°nh nh·∫•t qu√°n
            return {item['task_id']: datetime.fromisoformat(item['last_read_at']).astimezone(timezone.utc) for item in response.data}
        return {}
    except Exception as e:
        st.error(f"L·ªói khi t·∫£i tr·∫°ng th√°i ƒë√£ ƒë·ªçc: {e}")
        return {}

def mark_task_as_read(_supabase_client: Client, task_id: int, user_id: str):
    """Upserts the last read time for a user and a task using current UTC time."""
    try:
        # TH√äM on_conflict='task_id, user_id' ƒë·ªÉ Supabase bi·∫øt c√°ch x·ª≠ l√Ω tr√πng l·∫∑p
        _supabase_client.table('task_read_status').upsert(
            {
                'task_id': task_id,
                'user_id': user_id,
                'last_read_at': datetime.now(timezone.utc).isoformat()
            },
            on_conflict='task_id, user_id'  # D√≤ng quan tr·ªçng ƒë∆∞·ª£c th√™m v√†o
        ).execute()
    except Exception as e:
        # In ra l·ªói chi ti·∫øt h∆°n ƒë·ªÉ d·ªÖ ch·∫©n ƒëo√°n n·∫øu v·∫´n x·∫£y ra
        print(f"Kh√¥ng th·ªÉ ƒë√°nh d·∫•u ƒë√£ ƒë·ªçc cho task {task_id}: {e}")

def get_deadline_color(due_date_str: str) -> str:
    """
    Tr·∫£ v·ªÅ m√£ m√†u n·ªÅn d·ª±a tr√™n th·ªùi gian c√≤n l·∫°i ƒë·∫øn h·∫°n ch√≥t.
    - ƒê·ªè: < 3 ng√†y ho·∫∑c qu√° h·∫°n
    - Cam: 3-7 ng√†y
    - V√†ng: 7-15 ng√†y
    - Xanh: > 15 ng√†y
    """
    if not due_date_str:
        return "#f5f5f5"  # M√†u x√°m nh·∫°t n·∫øu kh√¥ng c√≥ deadline

    try:
        # ƒê·∫∑t m√∫i gi·ªù Vi·ªát Nam
        local_tz = ZoneInfo("Asia/Ho_Chi_Minh")
        
        # Chuy·ªÉn ƒë·ªïi deadline v√† th·ªùi gian hi·ªán t·∫°i sang c√πng m√∫i gi·ªù
        due_date = datetime.fromisoformat(due_date_str).astimezone(local_tz)
        now = datetime.now(local_tz)
        
        time_remaining = due_date - now
        days_remaining = time_remaining.days

        if days_remaining < 3:
            return "#ffebee"  # ƒê·ªè nh·∫°t
        elif 3 <= days_remaining < 7:
            return "#fff3e0"  # Cam nh·∫°t
        elif 7 <= days_remaining < 15:
            return "#fffde7"  # V√†ng nh·∫°t
        else:
            return "#e8f5e9"  # Xanh nh·∫°t
            
    except (ValueError, TypeError):
        return "#f5f5f5"  # Tr·∫£ v·ªÅ m√†u x√°m n·∫øu c√≥ l·ªói
    
def sanitize_filename(filename: str) -> str:
    """
    "L√†m s·∫°ch" t√™n file: chuy·ªÉn th√†nh ch·ªØ kh√¥ng d·∫•u, b·ªè k√Ω t·ª± ƒë·∫∑c bi·ªát,
    thay th·∫ø kho·∫£ng tr·∫Øng b·∫±ng g·∫°ch n·ªëi.
    """
    # Chuy·ªÉn chu·ªói unicode (c√≥ d·∫•u) th√†nh d·∫°ng g·∫ßn nh·∫•t kh√¥ng d·∫•u
    value = unicodedata.normalize('NFKD', filename).encode('ascii', 'ignore').decode('ascii')
    # Lo·∫°i b·ªè c√°c k√Ω t·ª± kh√¥ng ph·∫£i l√† ch·ªØ, s·ªë, d·∫•u g·∫°ch d∆∞·ªõi, g·∫°ch n·ªëi, d·∫•u ch·∫•m
    value = re.sub(r'[^\w\s.-]', '', value).strip()
    # Thay th·∫ø m·ªôt ho·∫∑c nhi·ªÅu kho·∫£ng tr·∫Øng/g·∫°ch n·ªëi b·∫±ng m·ªôt g·∫°ch n·ªëi duy nh·∫•t
    value = re.sub(r'[-\s]+', '-', value)
    return value

# H√ÄM CH·∫®N ƒêO√ÅN D√ÄNH RI√äNG CHO EMPLOYEE_APP.PY
def add_comment(task_id: int, user_id: str, content: str, uploaded_file=None):
    """Th√™m b√¨nh lu·∫≠n m·ªõi, v·ªõi file ƒë√≠nh k√®m ƒë√£ ƒë∆∞·ª£c l√†m s·∫°ch t√™n."""
    attachment_url = None
    attachment_original_name = None 

    if uploaded_file:
        if uploaded_file.size > 2 * 1024 * 1024:
            st.error("L·ªói: K√≠ch th∆∞·ªõc file kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° 2MB.")
            return

        # L∆∞u l·∫°i t√™n g·ªëc ƒë·ªÉ hi·ªÉn th·ªã
        attachment_original_name = uploaded_file.name
        
        # FIX: L√†m s·∫°ch t√™n file tr∆∞·ªõc khi t·∫°o ƒë∆∞·ªùng d·∫´n
        sanitized_name = sanitize_filename(uploaded_file.name)
        file_path = f"task_{task_id}/{user_id}_{int(datetime.now().timestamp())}_{sanitized_name}"
        
        try:
            # D√πng client 'supabase' cho employee
            supabase.storage.from_("task-attachments").upload(
                file=uploaded_file.getvalue(),
                path=file_path,
                file_options={"content-type": uploaded_file.type}
            )
            attachment_url = supabase.storage.from_("task-attachments").get_public_url(file_path)
        except Exception as e:
            st.error(f"L·ªói khi t·∫£i file l√™n: {e}")
            return

    try:
        insert_data = {
            'task_id': task_id,
            'user_id': user_id,
            'content': content,
            'attachment_url': attachment_url,
            'attachment_original_name': attachment_original_name
        }
        # D√πng client 'supabase' cho employee
        supabase.table('comments').insert(insert_data).execute()
        st.cache_data.clear()
        st.toast("ƒê√£ g·ª≠i b√¨nh lu·∫≠n!", icon="üí¨")
    except Exception as e:
        st.error(f"L·ªói khi th√™m b√¨nh lu·∫≠n: {e}")

def update_task_status(task_id: int, new_status: str):
    """Updates the status of a specific task."""
    try:
        supabase.table('tasks').update({'status': new_status}).eq('id', task_id).execute()
        st.cache_data.clear()
        st.toast(f"ƒê√£ c·∫≠p nh·∫≠t tr·∫°ng th√°i!", icon="üîÑ")
    except Exception as e:
        st.error(f"L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i: {e}")

def change_password(new_password: str):
    """Updates the password for the currently logged-in user."""
    try:
        supabase.auth.update_user({"password": new_password})
        st.success("‚úÖ ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng! Vui l√≤ng s·ª≠ d·ª•ng m·∫≠t kh·∫©u m·ªõi ·ªü l·∫ßn ƒëƒÉng nh·∫≠p sau.")
    except Exception as e:
        st.error(f"L·ªói khi ƒë·ªïi m·∫≠t kh·∫©u: {e}")

# --- Main App Logic ---
if 'user' not in st.session_state:
    st.session_state.user = None

# --- Login UI ---
if st.session_state.user is None:
    
    if 'logout_message' in st.session_state:
        st.warning(st.session_state.logout_message)
        del st.session_state.logout_message # X√≥a th√¥ng b√°o ƒë·ªÉ kh√¥ng hi·ªÉn th·ªã l·∫°i

    st.title("üßë‚Äçüíª ƒêƒÉng nh·∫≠p h·ªá th·ªëng")
    with st.form("login_form"):
        email = st.text_input("Email")
        password = st.text_input("M·∫≠t kh·∫©u", type="password")
        submitted = st.form_submit_button("ƒêƒÉng nh·∫≠p")
        if submitted:
            try:
                user_response = supabase.auth.sign_in_with_password({"email": email, "password": password})
                st.session_state.user = user_response.user
                st.rerun()
            except Exception as e:
                st.error("Email ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng. Vui l√≤ng th·ª≠ l·∫°i.")

# --- Main App UI (after login) ---
else:
    # ===================================================================
    # B·∫ÆT ƒê·∫¶U: LOGIC KI·ªÇM TRA KH√îNG HO·∫†T ƒê·ªòNG
    # ===================================================================
    TIMEOUT_IN_SECONDS = 1800 # 30 ph√∫t

    is_expired = False
    if 'last_activity_time' in st.session_state:
        idle_duration = time.time() - st.session_state.last_activity_time
        if idle_duration > TIMEOUT_IN_SECONDS:
            is_expired = True

    if is_expired:
        # N·∫øu ƒê√É H·∫æT H·∫†N: Hi·ªÉn th·ªã c·∫£nh b√°o v√† kh√¥ng l√†m g√¨ th√™m.
        # Vi·ªác kh√¥ng c·∫≠p nh·∫≠t last_activity_time s·∫Ω gi·ªØ cho tr·∫°ng th√°i is_expired=True ·ªü c√°c l·∫ßn ch·∫°y l·∫°i sau.
        st.error(
            "**Phi√™n l√†m vi·ªác ƒë√£ h·∫øt h·∫°n!** "
            "ƒê·ªÉ b·∫£o m·∫≠t, m·ªçi thao t√°c ƒë√£ ƒë∆∞·ª£c v√¥ hi·ªáu h√≥a. "
            "Vui l√≤ng sao ch√©p l·∫°i n·ªôi dung b·∫°n ƒëang so·∫°n (n·∫øu c√≥), sau ƒë√≥ **ƒêƒÉng xu·∫•t** v√† ƒëƒÉng nh·∫≠p l·∫°i."
        )
    else:
        # N·∫øu CH∆ØA H·∫æT H·∫†N: C·∫≠p nh·∫≠t l·∫°i th·ªùi gian ho·∫°t ƒë·ªông.
        # Ch·ªâ c·∫≠p nh·∫≠t trong tr∆∞·ªùng h·ª£p n√†y.
        st.session_state.last_activity_time = time.time()
    # ===================================================================
    # K·∫æT TH√öC: LOGIC KI·ªÇM TRA KH√îNG HO·∫†T ƒê·ªòNG
    # ===================================================================
    user = st.session_state.user
    
    profile_res = supabase.table('profiles').select('account_status, role').eq('id', user.id).single().execute()
    if profile_res.data and profile_res.data.get('account_status') == 'inactive':
        st.error("T√†i kho·∫£n c·ªßa b·∫°n ƒë√£ b·ªã v√¥ hi·ªáu h√≥a. Vui l√≤ng li√™n h·ªá qu·∫£n l√Ω.")
        if st.button("ƒêƒÉng xu·∫•t"):
            supabase.auth.sign_out()
            st.session_state.user = None
            st.rerun()
        st.stop()
    
    user_role = profile_res.data.get('role', 'employee') if profile_res.data else 'employee'

    st.title(f"Ch√†o m·ª´ng, {user.user_metadata.get('full_name', user.email)}!")
    # S·ª≠ d·ª•ng c·ªôt ƒë·ªÉ ƒë·∫∑t c√°c n√∫t c·∫°nh nhau
    col1, col2, _ = st.columns([0.2, 0.2, 0.6]) 

    if col1.button("ƒêƒÉng xu·∫•t"):
        supabase.auth.sign_out()
        st.session_state.user = None
        st.rerun()

    if col2.button("üîÑ L√†m m·ªõi"):
        # X√≥a cache ƒë·ªÉ bu·ªôc t·∫£i l·∫°i c√¥ng vi·ªác m·ªõi
        st.cache_data.clear()
        st.toast("ƒê√£ l√†m m·ªõi d·ªØ li·ªáu!", icon="üîÑ")
        # Ch·∫°y l·∫°i ·ª©ng d·ª•ng ƒë·ªÉ hi·ªÉn th·ªã d·ªØ li·ªáu m·ªõi
        st.rerun()
        
    with st.expander("üîë ƒê·ªïi m·∫≠t kh·∫©u"):
        with st.form("change_password_form_emp", clear_on_submit=True):
            new_password = st.text_input("M·∫≠t kh·∫©u m·ªõi", type="password")
            confirm_password = st.text_input("X√°c nh·∫≠n m·∫≠t kh·∫©u m·ªõi", type="password")
            submitted_pw_change = st.form_submit_button("L∆∞u m·∫≠t kh·∫©u m·ªõi", disabled=is_expired)

            if submitted_pw_change and not is_expired:
                if not new_password or not confirm_password:
                    st.warning("Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß m·∫≠t kh·∫©u m·ªõi v√† x√°c nh·∫≠n.")
                elif new_password != confirm_password:
                    st.error("M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp!")
                elif len(new_password) < 6:
                    st.error("M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±.")
                else:
                    change_password(new_password)
    
    st.divider()

    st.header("C√¥ng vi·ªác c·ªßa b·∫°n")
    st.markdown("""
    <style>
    .color-box {
        width: 15px;
        height: 15px;
        display: inline-block;
        border: 1px solid #ccc;
        vertical-align: middle;
        margin-right: 5px;
    }
    </style>
    <b>Ch√∫ th√≠ch Deadline:</b>
    <span class="color-box" style="background-color: #ffebee;"></span> < 3 ng√†y
    <span class="color-box" style="background-color: #fff3e0;"></span> 3-7 ng√†y
    <span class="color-box" style="background-color: #fffde7;"></span> 7-15 ng√†y
    <span class="color-box" style="background-color: #e8f5e9;"></span> > 15 ng√†y
    """, unsafe_allow_html=True)
    st.text("") # Th√™m m·ªôt kho·∫£ng tr·ªëng nh·ªè

    my_tasks = fetch_my_tasks(user.id)

    if not my_tasks:
        st.info("üéâ B·∫°n kh√¥ng c√≥ c√¥ng vi·ªác n√†o c·∫ßn l√†m. H√£y t·∫≠n h∆∞·ªüng th·ªùi gian r·∫£nh!")
    else:
        local_tz = ZoneInfo("Asia/Ho_Chi_Minh")
        read_statuses = fetch_read_statuses(supabase, user.id)

        # --- B∆∞·ªõc 1: Nh√≥m c√°c c√¥ng vi·ªác theo d·ª± √°n ---
        tasks_by_project = defaultdict(list)
        for task in my_tasks:
            project_info = task.get('projects')
            project_key = (project_info.get('project_name', 'D·ª± √°n kh√¥ng t√™n'), project_info.get('old_project_ref_id')) if project_info else ("C√¥ng vi·ªác chung", None)
            tasks_by_project[project_key].append(task)
        
        # --- B∆∞·ªõc 2: T·∫°o h·ªôp t√¨m ki·∫øm/ch·ªçn l·ª±a d·ª± √°n ---
        project_keys = sorted(tasks_by_project.keys(), key=lambda item: item[0])
        options_map = {f"{name} (M√£: {code})" if code else name: key for key, (name, code) in zip(project_keys, project_keys)}
        options_list = ["--- Hi·ªÉn th·ªã t·∫•t c·∫£ ---"] + list(options_map.keys())

        selected_option = st.selectbox(
            "üîç T√¨m v√† nh·∫£y ƒë·∫øn D·ª± √°n", 
            options=options_list,
            key="selected_project_emp" 
        )
        st.divider()

        # --- B∆∞·ªõc 3: L·ªçc d·ªØ li·ªáu d·ª±a tr√™n l·ª±a ch·ªçn ---
        if selected_option and selected_option != "--- Hi·ªÉn th·ªã t·∫•t c·∫£ ---":
            selected_key = options_map[selected_option]
            projects_to_display = {selected_key: tasks_by_project[selected_key]}
        else:
            projects_to_display = tasks_by_project

        # S·∫Øp x·∫øp c√°c d·ª± √°n theo deadline s·ªõm nh·∫•t trong d·ª± √°n ƒë√≥
        sorted_projects = sorted(projects_to_display.items(), key=lambda item: min(t.get('due_date') or '9999' for t in item[1]))

        if not sorted_projects:
            st.info("Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£ ph√π h·ª£p.")

        for (project_name, project_code), tasks in sorted_projects:
            display_title = f"D·ª± √°n: {project_name}" + (f" (M√£: {project_code})" if project_code else "")
            st.subheader(display_title)

            # S·∫Øp x·∫øp c√°c task trong d·ª± √°n n√†y theo deadline
            sorted_tasks_in_project = sorted(tasks, key=lambda t: (t.get('due_date') is None, t.get('due_date')))
            task_counter = 0

            for task in sorted_tasks_in_project:
                # --- Ph·∫ßn code hi·ªÉn th·ªã chi ti·∫øt m·ªói c√¥ng vi·ªác (gi·ªØ nguy√™n nh∆∞ c≈©) ---
                task_counter += 1
                comments = fetch_comments(task['id'])

                # <<< B·∫ÆT ƒê·∫¶U: TH√äM ƒêO·∫†N CODE M·ªöI T·∫†I ƒê√ÇY >>>
                is_manager_completed = task.get('is_completed_by_manager', False)

                # Bi·∫øn n√†y s·∫Ω quy·∫øt ƒë·ªãnh vi·ªác kh√≥a c√°c widget
                # K·∫øt h·ª£p v·ªõi is_expired ƒë·ªÉ kh√≥a khi h·∫øt phi√™n l√†m vi·ªác
                is_task_locked = is_manager_completed or is_expired
                # <<< K·∫æT TH√öC: TH√äM ƒêO·∫†N CODE M·ªöI T·∫†I ƒê√ÇY >>>
                
                status_icon = ""
                has_new_message = False
                last_read_time_utc = read_statuses.get(task['id'], datetime.fromtimestamp(0, tz=timezone.utc))
                last_event_time_utc = datetime.fromisoformat(task['created_at']).astimezone(timezone.utc)
                if comments:
                    last_comment_time_utc = datetime.fromisoformat(comments[0]['created_at']).astimezone(timezone.utc)
                    if last_comment_time_utc > last_event_time_utc:
                        last_event_time_utc = last_comment_time_utc
                if comments and comments[0]['user_id'] == user.id:
                    status_icon = "‚úÖ ƒê√£ tr·∫£ l·ªùi"
                elif last_event_time_utc > last_read_time_utc:
                    status_icon = "üí¨ M·ªõi!"
                    has_new_message = True
                elif comments:
                    status_icon = "‚úîÔ∏è ƒê√£ xem"

                is_overdue = False
                if task.get('due_date'):
                    try:
                        due_date = datetime.fromisoformat(task['due_date']).astimezone(local_tz)
                        if due_date < datetime.now(local_tz):
                            is_overdue = True
                    except (ValueError, TypeError):
                        is_overdue = False

                line_1 = f"**Task {task_counter}. {task['task_name']}**"
                try:
                    formatted_due_date = datetime.fromisoformat(task['due_date']).astimezone(local_tz).strftime('%d/%m/%Y, %H:%M')
                except (ValueError, TypeError):
                    formatted_due_date = 'N/A'
                
                line_2_parts = [
                    status_icon,
                    f"Tr·∫°ng th√°i: *{task['status']}*",
                    f"Deadline: *{formatted_due_date}*"
                ]
                line_2 = " | ".join(filter(None, line_2_parts))

                deadline_color = get_deadline_color(task.get('due_date'))
                st.markdown(f'<div style="background-color: {deadline_color}; border-radius: 7px; padding: 10px; margin-bottom: 10px;">', unsafe_allow_html=True)
                
                st.markdown(f"<span style='color: blue;'>{line_1}</span>", unsafe_allow_html=True)
                st.markdown(line_2)

                if is_overdue and task.get('status') != 'Done' and not is_manager_completed:
                    st.markdown("<span style='color: red;'><b> C·∫£nh b√°o: Nhi·ªám v·ª• ƒë√£ qu√° h·∫°n ho·∫∑c ng∆∞·ªùi qu·∫£n l√Ω ƒë√£ chuy·ªÉn tr·∫°ng th√°i th·ª±c hi·ªán do c√≥ y√™u c·∫ßu m·ªõi (vui l√≤ng ki·ªÉm tra)!</b></span>", unsafe_allow_html=True)

                with st.expander("Chi ti·∫øt & Th·∫£o lu·∫≠n"):
                    # <<< TH√äM ƒêO·∫†N CODE M·ªöI T·∫†I ƒê√ÇY >>>
                    if is_manager_completed:
                        # L·∫•y th√¥ng tin qu·∫£n l√Ω t·ª´ d·ªØ li·ªáu task
                        manager_info = task.get('manager')
                        # L·∫•y t√™n, n·∫øu kh√¥ng c√≥ th√¨ d√πng t·ª´ 'Qu·∫£n l√Ω' l√†m m·∫∑c ƒë·ªãnh
                        manager_name = manager_info.get('full_name', 'ho·∫∑c Admin') if manager_info else 'ho·∫∑c Admin'
                        # Hi·ªÉn th·ªã th√¥ng b√°o v·ªõi t√™n c·ª• th·ªÉ
                        st.success(f"‚úì C√¥ng vi·ªác n√†y ƒë√£ ƒë∆∞·ª£c Qu·∫£n l√Ω **{manager_name}** x√°c nh·∫≠n ho√†n th√†nh. M·ªçi thao t√°c ƒë√£ ƒë∆∞·ª£c kh√≥a.")

                        # --- B·∫ÆT ƒê·∫¶U CODE M·ªöI ---
                        # L·∫•y d·ªØ li·ªáu ƒë√°nh gi√° t·ª´ task
                        rating = task.get('manager_rating')
                        review = task.get('manager_review')

                        if rating: # Ch·ªâ hi·ªÉn th·ªã n·∫øu c√≥ ƒë√°nh gi√°
                            stars = "‚≠ê" * rating + "‚òÜ" * (5 - rating)
                            st.markdown(f"#### **ƒê√°nh gi√° t·ª´ qu·∫£n l√Ω:**")
                            st.markdown(f"**X·∫øp h·∫°ng:** <span style='font-size: 1.2em; color: orange;'>{stars}</span>", unsafe_allow_html=True)

                            if review:
                                st.markdown("**Nh·∫≠n x√©t:**")
                                st.info(review)
                        # --- K·∫æT TH√öC CODE M·ªöI ---
                        
                        st.divider()
                    if has_new_message:
                        if st.button("‚úîÔ∏è ƒê√°nh d·∫•u ƒë√£ ƒë·ªçc", key=f"read_emp_{task['id']}", help="B·∫•m v√†o ƒë√¢y ƒë·ªÉ x√°c nh·∫≠n b·∫°n ƒë√£ xem tin nh·∫Øn m·ªõi nh·∫•t.", disabled=is_expired) and not is_expired:
                            mark_task_as_read(supabase, task['id'], user.id)
                            fetch_read_statuses.clear()
                            st.rerun()
                        st.divider()

                    st.markdown("#### Chi ti·∫øt c√¥ng vi·ªác")
                    col1, col2 = st.columns(2)
                    with col1:
                        if task['description']:
                            st.markdown(task['description'])
                    
                    with col2:
                        status_options = ['To Do', 'In Progress', 'Done']
                        current_status_index = status_options.index(task['status']) if task['status'] in status_options else 0
                        new_status = st.selectbox(
                            "C·∫≠p nh·∫≠t tr·∫°ng th√°i:",
                            options=status_options,
                            index=current_status_index,
                            key=f"status_{task['id']}",
                            disabled=is_task_locked
                        )
                        if new_status != task['status'] and not is_task_locked:
                            update_task_status(task['id'], new_status)
                            st.rerun()

                    st.divider()

                    st.markdown("#### Th·∫£o lu·∫≠n")
                    with st.container(height=250):
                        if not comments:
                            st.info("Ch∆∞a c√≥ b√¨nh lu·∫≠n n√†o cho c√¥ng vi·ªác n√†y.", icon="üìÑ")
                        else:
                            for comment in comments:
                                commenter_name = comment.get('profiles', {}).get('full_name', "Ng∆∞·ªùi d√πng ·∫©n")
                                is_manager_comment = comment.get('profiles', {}).get('role') == 'manager'
                                comment_time_local = datetime.fromisoformat(comment['created_at']).astimezone(local_tz).strftime('%H:%M, %d/%m/%Y')
                                
                                st.markdown(
                                    f"<div style='border-left: 3px solid {'#ff4b4b' if is_manager_comment else '#007bff'}; padding-left: 10px; margin-bottom: 10px;'>"
                                    f"<b>{commenter_name}</b> {'(Qu·∫£n l√Ω)' if is_manager_comment else ''} <span style='font-size: 0.8em; color: gray;'><i>({comment_time_local})</i></span>:<br>"
                                    f"{comment['content']}"
                                    "</div>",
                                    unsafe_allow_html=True
                                )

                                if comment.get('attachment_url'):
                                    url = comment['attachment_url']
                                    file_name = comment.get('attachment_original_name', 'downloaded_file')
                                    
                                    try:
                                        response = requests.get(url)
                                        response.raise_for_status()
                                        st.download_button(
                                            label="üìÇ T·∫£i file ƒë√≠nh k√®m",
                                            data=response.content,
                                            file_name=file_name,
                                            key=f"download_emp_{task['id']}_{comment['id']}"
                                        )
                                        st.caption(f"{file_name}")
                                    except requests.exceptions.RequestException as e:
                                        st.error(f"Kh√¥ng th·ªÉ t·∫£i t·ªáp: {e}")
                    
                    with st.form(key=f"comment_form_{task['id']}", clear_on_submit=True):
                        comment_content = st.text_area("Th√™m b√¨nh lu·∫≠n c·ªßa b·∫°n:", key=f"comment_text_{task['id']}", label_visibility="collapsed", placeholder="Nh·∫≠p trao ƒë·ªïi v·ªÅ c√¥ng vi·ªác...",disabled=is_task_locked)
                        uploaded_file = st.file_uploader("ƒê√≠nh k√®m file (Word, RAR, ZIP <2MB)", type=['doc', 'docx', 'rar', 'zip'], accept_multiple_files=False, key=f"file_{task['id']}",disabled=is_task_locked)
                        
                        submitted_comment = st.form_submit_button("G·ª≠i b√¨nh lu·∫≠n",disabled=is_task_locked)
                        if submitted_comment and is_task_locked and (comment_content or uploaded_file):
                            st.warning("‚ö†Ô∏è N·ªôi dung c·ªßa b·∫°n CH∆ØA ƒê∆Ø·ª¢C G·ª¨I do phi√™n l√†m vi·ªác ƒë√£ h·∫øt h·∫°n/ b·ªã kh√≥a. D∆∞·ªõi ƒë√¢y l√† b·∫£n sao ƒë·ªÉ b·∫°n ti·ªán l∆∞u l·∫°i:")
                            if comment_content:
                                st.code(comment_content, language=None)
                            if uploaded_file:
                                st.info(f"B·∫°n c≈©ng ƒë√£ ƒë√≠nh k√®m t·ªáp: **{uploaded_file.name}**. Vui l√≤ng t·∫£i l·∫°i t·ªáp n√†y sau khi ƒëƒÉng nh·∫≠p.")
                        if submitted_comment and (comment_content or uploaded_file) and not is_expired:
                            add_comment(task['id'], user.id, comment_content, uploaded_file)
                            st.rerun()
                st.markdown("</div>", unsafe_allow_html=True)